{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dev-datafactory-2154"
		},
		"sql_server_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sql_server'",
			"defaultValue": "Integrated Security=False;Data Source=localhost;Initial Catalog=AdventureWorks;User ID=dat"
		},
		"databricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0703-105957-mmt3gzht"
		},
		"linked_services_data_lake_storage_gen2_custom_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://devstorageshin.dfs.core.windows.net/"
		},
		"linked_services_key_vault_custom_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://dev-key-vault-shin-21.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/checkModifiedDateColumn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupModifiedDateColumn",
						"description": "Look up whether modifiedDate column exist",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT TABLE_SCHEMA,TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS\nWHERE  TABLE_SCHEMA = '@{pipeline().parameters.schema_name}' AND TABLE_NAME='@{pipeline().parameters.table_name}' AND UPPER(COLUMN_NAME)='MODIFIEDDATE';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookupModifiedDateColumn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@contains(activity('LookupModifiedDateColumn').output, 'firstRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "copyDataWithDefaultPartition",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copyDataWithDefaultPartiton",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@pipeline().parameters.schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@pipeline().parameters.table_name",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "copyDataByDynamicPartition",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copyDataByDynamicPartition",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@pipeline().parameters.schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@pipeline().parameters.table_name",
												"type": "Expression"
											},
											"column_name": {
												"value": "@activity('LookupModifiedDateColumn').output.firstRow.COLUMN_NAME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset_noparameter')]",
				"[concat(variables('factoryId'), '/pipelines/copyDataWithDefaultPartiton')]",
				"[concat(variables('factoryId'), '/pipelines/copyDataByDynamicPartition')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyDataByDynamicPartition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "copy data by dynamic partition using ModifiedDate column",
				"activities": [
					{
						"name": "CopyDataByDynamicPartition",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupColumnMinMax",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM @{pipeline().parameters.schema_name}.@{pipeline().parameters.table_name} WHERE ?DfDynamicRangePartitionCondition;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionColumnName": {
										"value": "@{pipeline().parameters.column_name}",
										"type": "Expression"
									},
									"partitionUpperBound": {
										"value": "@{activity('LookupColumnMinMax').output.firstRow.MAX_VALUE}",
										"type": "Expression"
									},
									"partitionLowerBound": {
										"value": "@{activity('LookupColumnMinMax').output.firstRow.MIN_VALUE}",
										"type": "Expression"
									}
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTableFullLoad",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupColumnMinMax",
						"description": "Look up for min max of column used for dynamic partition",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT MIN(@{pipeline().parameters.column_name}) AS MIN_VALUE,\n    MAX(@{pipeline().parameters.column_name}) AS MAX_VALUE \nFROM @{pipeline().parameters.schema_name}.@{pipeline().parameters.table_name};",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"column_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset_noparameter')]",
				"[concat(variables('factoryId'), '/datasets/ParquetTableFullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyDataByPartition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyTableByPhysicalPartition",
						"description": "Copy table from SQL server to ADL2 by physical partition",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "PhysicalPartitionsOfTable"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EachTableDataset",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTableFullLoad",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset')]",
				"[concat(variables('factoryId'), '/datasets/ParquetTableFullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyDataWithDefaultPartiton')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "DynamicRange",
								"partitionSettings": {
									"partitionUpperBound": "",
									"partitionLowerBound": ""
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EachTableDataset",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTableFullLoad",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset')]",
				"[concat(variables('factoryId'), '/datasets/ParquetTableFullLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copyDataWithNoPartition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EachTableDataset",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTable",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-09T13:00:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset')]",
				"[concat(variables('factoryId'), '/datasets/ParquetTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/full_load_each_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookUp_CheckTablePhysicalPartition",
						"description": "Check whether current table has a physical partition",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT DISTINCT s.name AS SchemaName, t.name AS TableName, pf.name AS PartitionFunctionName, c.name AS ColumnName, iif(pf.name is null, 'no', 'yes') AS HasPartition\nFROM sys.tables AS t\nLEFT JOIN sys.objects AS o ON t.object_id = o.object_id\nLEFT JOIN sys.schemas AS s ON o.schema_id = s.schema_id\nLEFT JOIN sys.indexes AS i ON t.object_id = i.object_id \nLEFT JOIN sys.index_columns AS ic ON ic.partition_ordinal > 0 AND ic.index_id = i.index_id AND ic.object_id = t.object_id \nLEFT JOIN sys.columns AS c ON c.object_id = ic.object_id AND c.column_id = ic.column_id \nLEFT JOIN sys.partition_schemes ps ON i.data_space_id = ps.data_space_id \nLEFT JOIN sys.partition_functions pf ON pf.function_id = ps.function_id \nWHERE s.name='@{pipeline().parameters.schema_name}' AND t.name =  '@{pipeline().parameters.table_name}';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "LookUp_CheckTablePhysicalPartition",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(string(activity('LookUp_CheckTablePhysicalPartition').output.firstRow.HasPartition),'yes')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "checkModifiedDateColumn",
									"description": "Pipeline to check whether table have a modifiedDate column",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "checkModifiedDateColumn",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@pipeline().parameters.schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@pipeline().parameters.table_name",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "copyDataByPartition",
									"description": "Full load table from SQL server to ADL2 by physical partition",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "copyDataByPartition",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@pipeline().parameters.schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@pipeline().parameters.table_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset_noparameter')]",
				"[concat(variables('factoryId'), '/pipelines/checkModifiedDateColumn')]",
				"[concat(variables('factoryId'), '/pipelines/copyDataByPartition')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/full_load_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "full_load_each_table",
									"description": "Full load each table from the for each activity",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "full_load_each_table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@item().schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@item().table_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TableList": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/full_load_each_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/full_load_look_up')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSchemaTables",
						"description": "Look up query to fetch all the table names belong to the schema",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA as schema_name, TABLE_NAME as table_name\nFROM information_schema.tables\nWHERE TABLE_SCHEMA = 'SalesLT' AND TABLE_TYPE='BASE TABLE' AND TABLE_NAME != 'table_store_ChangeTracking_version';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "lookUpQueryTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "full_load_load",
						"description": "perform the full load process on each table",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupSchemaTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "TableList",
								"value": "@activity('LookupSchemaTables').output.value"
							}
						],
						"typeProperties": {
							"pipeline": {
								"referenceName": "full_load_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TableList": {
									"value": "@activity('LookupSchemaTables').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"ugjhg": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:33Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookUpQueryTables')]",
				"[concat(variables('factoryId'), '/pipelines/full_load_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental_load_each_table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupLastChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupCurrentChangeTrackingVersionActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupPrimaryKey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT\n    DST.*,\n    CT.SYS_CHANGE_VERSION,\n    CT.SYS_CHANGE_OPERATION\nFROM\n    @{pipeline().parameters.schema_name}.@{pipeline().parameters.table_name} AS DST\n    RIGHT OUTER JOIN CHANGETABLE(CHANGES @{pipeline().parameters.schema_name}.@{pipeline().parameters.table_name}, @{activity('LookupLastChangeTrackingVersionActivity').output.firstRow.SYS_CHANGE_VERSION}) AS CT\n    ON @{activity('LookupPrimaryKey').output.firstRow.PrimaryKeysOnClause}\nWHERE\n    CT.SYS_CHANGE_VERSION <= @{activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetTableIncrementalLoad",
								"type": "DatasetReference",
								"parameters": {
									"schema_name": {
										"value": "@pipeline().parameters.schema_name",
										"type": "Expression"
									},
									"table_name": {
										"value": "@pipeline().parameters.table_name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LookupLastChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM @{pipeline().parameters.schema_name}.table_store_ChangeTracking_version WHERE TableName= '@{pipeline().parameters.table_name}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ChangeTrackingDataset",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LookupCurrentChangeTrackingVersionActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT CHANGE_TRACKING_CURRENT_VERSION() as CurrentChangeTrackingVersion;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupPrimaryKey",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT \n    OBJECT_NAME(ic.object_id) AS TableName,\n    STRING_AGG('DST.' + QUOTENAME(c.name) + '=' + 'CT.' + QUOTENAME(c.name), ' AND ') AS PrimaryKeysOnClause\nFROM \n    sys.indexes AS i\nINNER JOIN \n    sys.index_columns AS ic ON i.object_id = ic.object_id AND i.index_id = ic.index_id\nINNER JOIN \n    sys.columns AS c ON ic.object_id = c.object_id AND ic.column_id = c.column_id\nWHERE \n    i.is_primary_key = 1\n    AND OBJECT_NAME(ic.object_id) = '@{pipeline().parameters.table_name}'\nGROUP BY \nOBJECT_NAME(ic.object_id);",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "EachTableDataset_noparameter",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Stored procedure1",
						"description": "Stored procedure to update last change tracking version",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[SalesLT].[Update_ChangeTracking_Version]",
							"storedProcedureParameters": {
								"CurrentTrackingVersion": {
									"value": {
										"value": "@activity('LookupCurrentChangeTrackingVersionActivity').output.firstRow.CurrentChangeTrackingVersion",
										"type": "Expression"
									}
								},
								"TableName": {
									"value": {
										"value": "@activity('LookupLastChangeTrackingVersionActivity').output.firstRow.TableName",
										"type": "Expression"
									}
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sql_server",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EachTableDataset_noparameter')]",
				"[concat(variables('factoryId'), '/datasets/ParquetTableIncrementalLoad')]",
				"[concat(variables('factoryId'), '/datasets/ChangeTrackingDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental_load_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "incremental_load_each_table",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "incremental_load_each_table",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"schema_name": {
												"value": "@item().schema_name",
												"type": "Expression"
											},
											"table_name": {
												"value": "@item().table_name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TableList": {
						"type": "array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/incremental_load_each_table')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental_load_look_up')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSchemaTables",
						"description": "Look up query to fetch all the table names belong to the schema",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA as schema_name, TABLE_NAME as table_name\nFROM information_schema.tables\nWHERE TABLE_SCHEMA = 'SalesLT' AND TABLE_TYPE='BASE TABLE' AND TABLE_NAME != 'table_store_ChangeTracking_version';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "lookUpQueryTables",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "incremental_load_load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LookupSchemaTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "incremental_load_load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"TableList": {
									"value": "@activity('LookupSchemaTables').output.value",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-07-10T08:55:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lookUpQueryTables')]",
				"[concat(variables('factoryId'), '/pipelines/incremental_load_load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ChangeTrackingDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "SYS_CHANGE_VERSION",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EachTableDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EachTableDataset_noparameter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_services_data_lake_storage_gen2_custom",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{concat(dataset().schema_name,'/',dataset().table_name,'/','FullLoad','/',utcNow('yyyy/MM/dd'))}",
							"type": "Expression"
						},
						"fileSystem": "bronze-layer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_services_data_lake_storage_gen2_custom')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetTableFullLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_services_data_lake_storage_gen2_custom",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{concat(dataset().schema_name,'/',dataset().table_name,'/','FullLoad','/',utcNow('yyyy/MM/dd'))}",
							"type": "Expression"
						},
						"fileSystem": "bronze-layer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_services_data_lake_storage_gen2_custom')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParquetTableIncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linked_services_data_lake_storage_gen2_custom",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@{concat(dataset().schema_name,'/',dataset().table_name,'/','IncrementalLoad','/',utcNow('yyyy/MM/dd'))}",
							"type": "Expression"
						},
						"fileSystem": "bronze-layer"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linked_services_data_lake_storage_gen2_custom')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookUpPerTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookUpQueryTables')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sql_server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sql_server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/databricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADB Linked Service via MSI",
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4145753376904134.14.azuredatabricks.net",
					"authentication": "MSI",
					"workspaceResourceId": "/subscriptions/55a851c4-b3bf-4b1c-926a-af6cdad646b9/resourceGroups/dev_rg-charming-dinosaur/providers/Microsoft.Databricks/workspaces/dev-databrick-2153",
					"existingClusterId": "[parameters('databricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_services_data_lake_storage_gen2_custom')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linked_services_data_lake_storage_gen2_custom_properties_typeProperties_url')]",
					"credential": {
						"referenceName": "data_factory_bronze_container_identity",
						"type": "CredentialReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/data_factory_bronze_container_identity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linked_services_key_vault_custom')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('linked_services_key_vault_custom_properties_typeProperties_baseUrl')]",
					"credential": {
						"referenceName": "data_factory_key_vault_identity",
						"type": "CredentialReference"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/credentials/data_factory_key_vault_identity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sql_server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('sql_server_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "linked_services_key_vault_custom",
							"type": "LinkedServiceReference"
						},
						"secretName": "db-password"
					}
				},
				"connectVia": {
					"referenceName": "self-hosted-integration-runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/self-hosted-integration-runtime')]",
				"[concat(variables('factoryId'), '/linkedServices/linked_services_key_vault_custom')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "full_load_look_up",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2024-07-07T00:00:00",
						"timeZone": "SE Asia Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/full_load_look_up')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/self-hosted-integration-runtime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"selfContainedInteractiveAuthoringEnabled": false
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/adf_databrick_identity')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Credential for azure data factory to access databricks workspace",
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/55a851c4-b3bf-4b1c-926a-af6cdad646b9/resourceGroups/dev_rg-charming-dinosaur/providers/Microsoft.ManagedIdentity/userAssignedIdentities/adf_databrick_identity"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_factory_bronze_container_identity')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Credential for azure data factory to access bronze container",
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/55a851c4-b3bf-4b1c-926a-af6cdad646b9/resourceGroups/dev_rg-charming-dinosaur/providers/Microsoft.ManagedIdentity/userAssignedIdentities/data_factory_bronze_container_identity"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/data_factory_key_vault_identity')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Credential for azure data factory to access key vault",
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/55a851c4-b3bf-4b1c-926a-af6cdad646b9/resourceGroups/dev_rg-charming-dinosaur/providers/Microsoft.ManagedIdentity/userAssignedIdentities/data_factory_key_vault_identity"
				}
			},
			"dependsOn": []
		}
	]
}